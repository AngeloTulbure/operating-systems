package esercitazione10_1920;


import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class Monitor {
	private static final int CER=0;
	private static final int IDE=1;
	private int NCER, NIDE, N;
	private Lock l = new ReentrantLock();
	private Condition coda[] = new Condition[2]; // 1 coda per IDE, 1 coda per CER
	
	
	private int[] sosp = new int[2];
	private int[] occ = new int[2];
	
	public Monitor( int N) {
		this.NCER = 0;
		this.NIDE = 0;
		this.N = N;
		for(int i=0;i<2;i++) {
			coda[i] = l.newCondition();
			sosp[i]=0;
			occ[i]=0;
		}
	}
	
	public void richiediServizio(Cliente c) throws InterruptedException {
		l.lock();
		try{
			if (c.getTipo()=="CER"){
				while( (occ[CER]+occ[IDE])>=N || (NCER>NIDE && sosp[IDE]>0)){
					sosp[CER]++;
					System.out.println(c.getIdCliente()+": "+c.getTipo()+" in attesa del servizio di rilascio certificato");
					coda[CER].await();
					sosp[CER]--;
				}
				occ[CER]++;
				NCER++;
				
			}else if (c.getTipo()=="IDE"){
				while( (occ[CER]+occ[IDE])>=N  || (NIDE>=NCER && sosp[CER]>0)){
					sosp[IDE]++;
					System.out.println(c.getIdCliente()+": "+c.getTipo()+" in attesa del servizio di rilacio carta di identitÃƒ ");
					coda[IDE].await();
					sosp[IDE]--;
				}
				occ[IDE]++;
				NIDE++;			
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}finally{
			l.unlock();
		}
	}

	
	public void fineServizio(Cliente c) throws InterruptedException {
		l.lock();
		try{
			if (c.getTipo()=="CER")
				occ[CER]--;
			else if (c.getTipo()=="IDE")
				occ[IDE]--;
			System.out.println(c.getIdCliente()+": "+c.getTipo()+" sono stato servito");
			if(((NCER>NIDE && sosp[IDE]>0) || (NCER<=NIDE && sosp[IDE]>0 && sosp[CER]==0)) && (occ[CER]+occ[IDE])<N)
				coda[IDE].signal();
			if(((NIDE>=NCER && sosp[CER]>0) || (NIDE<NCER && sosp[CER]>0 && sosp[IDE]==0)) && (occ[CER]+occ[IDE])<N)
				coda[CER].signal();	
		}finally{
			l.unlock();
		}
	}
}